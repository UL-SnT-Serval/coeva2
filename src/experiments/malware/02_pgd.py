import warnings

import joblib

from pathlib import Path
import numpy as np
import tensorflow as tf

from src.examples.malware.malware_constraints import MalwareConstraints
from src.utils import Pickler, in_out, filter_initial_states
from datetime import datetime
from art.classifiers import KerasClassifier as kc
from tensorflow.keras.models import load_model
from art.attacks.evasion import ProjectedGradientDescent as PGD

warnings.simplefilter(action="ignore", category=FutureWarning)
warnings.simplefilter(action="ignore", category=RuntimeWarning)

config = in_out.get_parameters()


def run():

    tf.compat.v1.disable_eager_execution()
    Path(config["paths"]["attack_results"]).parent.mkdir(parents=True, exist_ok=True)

    save_history = True
    if "save_history" in config:
        save_history = config["save_history"]

    # ----- Load and create necessary objects

    constraints = MalwareConstraints(
        config["paths"]["features"],
        config["paths"]["constraints"],
    )

    X_initial_states = np.load(config["paths"]["x_candidates"])
    X_initial_states = filter_initial_states(
        X_initial_states, config["initial_state_offset"], config["n_initial_state"]
    )

    model = load_model(config["paths"]["surrogate"])
    scaler = joblib.load(config["paths"]["scaler"])

    # ----- Check constraints

    constraints.check_constraints_error(X_initial_states)

    # ----- Copy the initial states n_repetition times
    X_initial_states = np.repeat(X_initial_states, config["n_repetition"], axis=0)

    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print("Current Time =", current_time)

    kc_classifier = kc(
        model,
        clip_values=(0.0, 1.0),
    )
    pgd = PGD(kc_classifier, eps=config["thresholds"]["f2"], eps_step=config["thresholds"]["f2"]/3, norm=2, verbose=True)
    X_initial_states = scaler.transform(X_initial_states)
    attacks = pgd.generate(
        x=X_initial_states,
        # y=np.zeros(X_initial_states.shape[0]),
        mask=constraints.get_mutable_mask(),
    )

    attacks = scaler.inverse_transform(attacks)
    np.save(config["paths"]["attack_results"], attacks)
    print(config["paths"]["attack_results"])
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    print("Current Time =", current_time)


if __name__ == "__main__":
    run()
